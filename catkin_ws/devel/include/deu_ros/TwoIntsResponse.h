// Generated by gencpp from file deu_ros/TwoIntsResponse.msg
// DO NOT EDIT!


#ifndef DEU_ROS_MESSAGE_TWOINTSRESPONSE_H
#define DEU_ROS_MESSAGE_TWOINTSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace deu_ros
{
template <class ContainerAllocator>
struct TwoIntsResponse_
{
  typedef TwoIntsResponse_<ContainerAllocator> Type;

  TwoIntsResponse_()
    : result_add(0)
    , result_mult(0)  {
    }
  TwoIntsResponse_(const ContainerAllocator& _alloc)
    : result_add(0)
    , result_mult(0)  {
  (void)_alloc;
    }



   typedef int64_t _result_add_type;
  _result_add_type result_add;

   typedef int64_t _result_mult_type;
  _result_mult_type result_mult;





  typedef boost::shared_ptr< ::deu_ros::TwoIntsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::deu_ros::TwoIntsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TwoIntsResponse_

typedef ::deu_ros::TwoIntsResponse_<std::allocator<void> > TwoIntsResponse;

typedef boost::shared_ptr< ::deu_ros::TwoIntsResponse > TwoIntsResponsePtr;
typedef boost::shared_ptr< ::deu_ros::TwoIntsResponse const> TwoIntsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::deu_ros::TwoIntsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::deu_ros::TwoIntsResponse_<ContainerAllocator1> & lhs, const ::deu_ros::TwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.result_add == rhs.result_add &&
    lhs.result_mult == rhs.result_mult;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::deu_ros::TwoIntsResponse_<ContainerAllocator1> & lhs, const ::deu_ros::TwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace deu_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::deu_ros::TwoIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::deu_ros::TwoIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::deu_ros::TwoIntsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1ca22f620a4cf662ceee1274998498e7";
  }

  static const char* value(const ::deu_ros::TwoIntsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1ca22f620a4cf662ULL;
  static const uint64_t static_value2 = 0xceee1274998498e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "deu_ros/TwoIntsResponse";
  }

  static const char* value(const ::deu_ros::TwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 result_add\n"
"int64 result_mult\n"
"\n"
;
  }

  static const char* value(const ::deu_ros::TwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.result_add);
      stream.next(m.result_mult);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TwoIntsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::deu_ros::TwoIntsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::deu_ros::TwoIntsResponse_<ContainerAllocator>& v)
  {
    s << indent << "result_add: ";
    Printer<int64_t>::stream(s, indent + "  ", v.result_add);
    s << indent << "result_mult: ";
    Printer<int64_t>::stream(s, indent + "  ", v.result_mult);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DEU_ROS_MESSAGE_TWOINTSRESPONSE_H
